    JAVA 相关
     
    1.静态内部类、内部类、匿名内部类，为什么内部类会持有外部类的引用?持有的引用是this?还是其它?
     
    静态内部类：使用static修饰的内部类
     
    内部类：就是在某个类的内部又定义了一个类，内部类所嵌入的类称为外部类
     
    匿名内部类：使用new生成的内部类
     
    因为内部类的产生依赖于外部类，持有的引用是类名.this
     
    2.Java中try catch finally的执行顺序
     
    先执行try中代码，如果发生异常执行catch中代码，最后一定会执行finally中代码
     
    3.equals与==的区别：
     
    ==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是不是相等
     
    4.Object有哪些公用方法?
     
    方法equals测试的是两个对象是否相等
     
    方法clone进行对象拷贝
     
    方法getClass返回和当前对象相关的Class对象
     
    方法notify,notifyall,wait都是用来对给定对象进行线程同步的
     
    5.String、StringBuffer与StringBuilder的区别
     
    String 类型和 StringBuffer 类型的主要性能区别其实在于 String 是不可变的对象 StringBuffer和StringBuilder底层是 char[]数组实现的 StringBuffer是线程安全的，而StringBuilder是线程不安全的
     
    6.Java的四种引用的区别
     
    强引用：如果一个对象具有强引用，它就不会被垃圾回收器回收。即使当前内存空间不足，JVM 也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象
     
    软引用：在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收。
     
    弱引用：具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象
     
    虚引用：顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收。
     
    7.介绍垃圾回收机制
     
    标记回收法：遍历对象图并且记录可到达的对象，以便删除不可到达的对象，一般使用单线程工作并且可能产生内存碎片
     
    标记-压缩回收法：前期与第一种方法相同，只是多了一步，将所有的存活对象压缩到内存的一端，这样内存碎片就可以合成一大块可再利用的内存区域，提高了内存利用率
     
    复制回收法：把现有内存空间分成两部分，gc运行时，它把可到达对象复制到另一半空间，再清空正在使用的空间的全部对象。这种方法适用于短生存期的对象，持续复制长生存期的对象则导致效率降低。
     
    分代回收发：把内存空间分为两个或者多个域，如年轻代和老年代，年轻代的特点是对象会很快被回收，因此在年轻代使用效率比较高的算法。当一个对象经过几次回收后依然存活，对象就会被放入称为老年的内存空间，老年代则采取标记-压缩算法
    集合、数据结构相关

    1.你用过哪些集合类

    数据结构中用于存储数据的有哪些

    数组

    数组存储区间是连续的，占用内存严重，故空间复杂的很大。但数组的二分查找时间复杂度小，为O(1);数组的特点是：寻址容易，插入和删除困难;

    链表

    链表存储区间离散，占用内存比较宽松，故空间复杂度很小，但时间复杂度很大，达O(N)。链表的特点是：寻址困难，插入和删除容易。

    2.说说hashMap是怎样实现的

    哈希表:由数组+链表组成的

    当我们往HashMap中put元素的时候，先根据key的hashCode重新计算hash值，根据hash值得到这个元素在数组中的位置(即下标)，如果数组该位置上已经存放有其他元素了，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾。如果数组该位置上没有元素，就直接将该元素放到此数组中的该位置上。

    3.ArrayList,LinkedList的区别

    ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。

    对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。

    对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。

    4.ArrayList和Vector的主要区别是什么?

    ArrayList 和Vector底层是采用数组方式存储数据

    Vector:

    线程同步

    当Vector中的元素超过它的初始大小时，Vector会将它的容量翻倍，

    ArrayList:

    线程不同步，但性能很好

    当ArrayList中的元素超过它的初始大小时，ArrayList只增加50%的大小

    5.HashMap和 HashTable 的区别：

    HashTable比较老，是基于Dictionary 类实现的，HashTable 则是基于 Map接口实现的

    HashTable 是线程安全的， HashMap 则是线程不安全的

    HashMap可以让你将空值作为一个表的条目的key或value
    算法相关

    1.排序算法和稳定性，快排什么时候情况最坏?

    2.给最外层的rootview，把这个根视图下的全部button背景设置成红色，手写代码，不许用递归

    算法原理：

    Android的view视图是按树形结构分布，所以按树形结构遍历

    循环判断每一层的ViewGroup元素，将其入栈;否则判断当前view是否是Button类实例，是则改写背景色

    当前ViewGroup检查childView完成后，判断栈是否非空，取出栈顶元素ViewGroup重复步骤2直至栈为空。
    	
    void changeAllBtnBGColor(View view, int color) {
      if (view == null || !(view instanceof ViewGroup))
        return; 
      Stack m = new Stack<>();
      while (view != null) { 
        ViewGroup tmpGroup = (ViewGroup) view; 
        int count = tmpGroup.getChildCount(); 
        for (int i = 0; i < count; i++) { View child = tmpGroup.getChildAt(i);
        if (child instanceof ViewGroup) m.add(child); 
        else if (child instanceof Button) { child.setBackgroundColor(color);
        } } 
        if (m.isEmpty()) break; 
        else view = m.pop();
      } 
    }

    Thread、AsynTask相关
    1.wait()和sleep()的区别

    sleep来自Thread类，和wait来自Object类

    调用sleep()方法的过程中，线程不会释放对象锁。而 调用 wait 方法线程会释放对象锁

    sleep睡眠后不出让系统资源，wait让出系统资源其他线程可以占用CPU

    sleep(milliseconds)需要指定一个睡眠时间，时间一到会自动唤醒

    2.若Activity已经销毁，此时AsynTask执行完并且返回结果，会报异常吗?

    当一个App旋转时，整个Activity会被销毁和重建。当Activity重启时，AsyncTask中对该Activity的引用是无效的，因此onPostExecute()就不会起作用，若AsynTask正在执行，折会报 view not attached to window manager 异常

    同样也是生命周期的问题，在 Activity 的onDestory()方法中调用Asyntask.cancal方法，让二者的生命周期同步

    3.Activity销毁但Task如果没有销毁掉，当Activity重启时这个AsyncTask该如何解决?

    还是屏幕旋转这个例子，在重建Activity的时候，会回掉Activity.onRetainNonConfigurationInstance()重新传递一个新的对象给AsyncTask，完成引用的更新

    4.Android 线程间通信有哪几种方式(重要)

    共享内存(变量);

    文件，数据库;

    Handler;

    Java 里的 wait()，notify()，notifyAll()

    5.请介绍下 AsyncTask的内部实现，适用的场景是

    AsyncTask 内部也是 Handler 机制来完成的，只不过 Android 提供了执行框架来提供线程池来

    执行相应地任务，因为线程池的大小问题，所以 AsyncTask 只应该用来执行耗时时间较短的任务，

    比如 HTTP 请求，大规模的下载和数据库的更改不适用于 AsyncTask，因为会导致线程池堵塞，没有

    线程来执行其他的任务，导致的情形是会发生 AsyncTask 根本执行不了的问题。
    网络相关

    1.TCP三次握手

    2.为什么TCP是可靠的，UDP早不可靠的?为什么UDP比TCP快?

    TCP/IP协议高，因为其拥有三次握手双向机制，这一机制保证校验了数据，保证了他的可靠性。

    UDP就没有了，udp信息发出后,不验证是否到达对方,所以不可靠。

    但是就速度来说，还是UDP协议更高，毕竟其无需重复返回验证，只是一次性的

    3.http协议了解多少，说说里面的协议头部有哪些字段?

    http(超文本传输协议)是一个基于请求与响应模式的、无状态的、应用层的协议;http请求由三部分组成，分别是：请求行、消息报头、请求正文。

    HTTP消息报头包括普通报头、请求报头、响应报头、实体报头

    4.https了解多少

    HTTPS(全称：Hyper Text Transfer Protocol over Secure Socket Layer)，是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。

    5.谈谈 HTTP 中Get 和 Post 方法的区别

    GET - 从指定的服务器中获取数据，明文发送内容

    POST - 提交数据给指定的服务器处理

    1. POST请求不能被缓存下来

    2. POST请求不会保存在浏览器浏览记录中

    3. 以POST请求的URL无法保存为浏览器书签

    4. POST请求没有长度限制

    6.推送心跳包是TCP包还是UDP包或者HTTP包

    心跳包的实现是调用了socket.sendUrgentData(0xFF)这句代码实现的，所以，当然是TCP包。

    7.如何实现文件断点上传

    在 Android 中上传文件可以采用 HTTP 方式，也可以采用 Socket 方式，但是 HTTP 方式不能上传

    大文件，这里介绍一种通过 Socket 方式来进行断点续传的方式，服务端会记录下文件的上传进度，

    当某一次上传过程意外终止后，下一次可以继续上传，这里用到的其实还是 J2SE 里的知识。

    这个上传程序的原理是：客户端第一次上传时向服务端发送

    “Content-Length=35;filename=WinRAR_3.90_SC.exe;sourceid=“这种格式的字符串，服务端

    收到后会查找该文件是否有上传记录，如果有就返回已经上传的位置，否则返回新生成的 sourceid

    以及 position 为 0，类似 sourceid=2324838389;position=0“这样的字符串，客户端收到返回后

    的字符串后再从指定的位置开始上传文件。
    Fragment相关

    1.Fragment 如何实现类似 Activity 栈的压栈和出栈效果的?

    Fragment 的事物管理器内部维持了一个双向链表结构，该结构可以记录我们每次 add 的

    Fragment 和 replace 的 Fragment，然后当我们点击 back 按钮的时候会自动帮我们实现退栈操作。

    2.Fragment 在你们项目中的使用

    Fragment 是 android3.0 以后引入的的概念，做局部内容更新更方便，原来为了到达这一点要

    把多个布局放到一个 activity 里面，现在可以用多 Fragment 来代替，只有在需要的时候才加载

    Fragment，提高性能。

    Fragment 的好处：

    1. Fragment 可以使你能够将 activity 分离成多个可重用的组件，每个都有它自己的生命周期和

    UI。

    2. Fragment 可以轻松得创建动态灵活的 UI 设计，可以适应于不同的屏幕尺寸。从手机到平板电

    脑。

    3. Fragment 是一个独立的模块,紧紧地与 activity 绑定在一起。可以运行中动态地移除、加入、

    交换等。

    4. Fragment 提供一个新的方式让你在不同的安卓设备上统一你的 UI。

    5. Fragment 解决 Activity 间的切换不流畅，轻量切换。

    6. Fragment 替代 TabActivity 做导航，性能更好。

    7. Fragment 在 4.2.版本中新增嵌套 fragment 使用方法，能够生成更好的界面效果

    3.如何切换 fragement,不重新实例化

    正确的切换方式是 add()，切换时 hide()，add()另一个 Fragment;再次切换时，只需 hide()当前，

    show()另一个
    四大组件相关

    1.Activity和Fragment生命周期有哪些?

    Activity——onCreate->onStart->onResume->onPause->onStop->onDestroy

    Fragment——onAttach->onCreate->onCreateView->onActivityCreated->onStart->onResume->onPause->onStop->onDestroyView->onDestroy->onDetach

    2.广播的两种注册方式及有什么区别

    3.内存不足时，怎么保持Activity的一些状态，在哪个方法里面做具体操作?

    Activity的 onSaveInstanceState() 和 onRestoreInstanceState()并不是生命周期方法，它们不同于 onCreate()、onPause()等生命周期方法，它们并不一定会被触发。当应用遇到意外情况(如：内存不足、用户直接按Home键)由系统销毁一个Activity，onSaveInstanceState() 会被调用。但是当用户主动去销毁一个Activity时，例如在应用中按返回键，onSaveInstanceState()就不会被调用。除非该activity是被用户主动销毁的，通常onSaveInstanceState()只适合用于保存一些临时性的状态，而onPause()适合用于数据的持久化保存。

    4.启动service的两种方法?有什么区别?

    一种是startService(),另一种是bindService()。这两者的区别是第一种方式调用者开启了服务，即会与服务失去联系，两者没有关联。即使访问者退出了，服务仍在运行。如需解除服务必须显式的调用stopService方法。主要用于调用者与服务没有交互的情况下，也就是调用者不需要获取服务里的业务方法。比如电话录音。而后者调用者与服务绑定在一起的。当调用者退出的时候，服务也随之退出。用于需要与服务交互。

    5.Android中的Context, Activity，Appliction有什么区别?

    相同：Activity和Application都是Context的子类。

    Context从字面上理解就是上下文的意思，在实际应用中它也确实是起到了管理上下文环境中各个参数和变量的总用，方便我们可以简单的访问到各种资源。

    不同：维护的生命周期不同。 Context维护的是当前的Activity的生命周期，Application维护的是整个项目的生命周期。

    使用context的时候，小心内存泄露，防止内存泄露，注意一下几个方面：

    1. 不要让生命周期长的对象引用activity context，即保证引用activity的对象要与activity本身生命周期是一样的。

    2. 对于生命周期长的对象，可以使用application，context。

    3. 避免非静态的内部类，尽量使用静态类，避免生命周期问题，注意内部类对外部对象引用导致的生命周期变化。

    6.Context是什么?

    它描述的是一个应用程序环境的信息，即上下文。

    该类是一个抽象(abstract class)类，Android提供了该抽象类的具体实现类(ContextIml)。

    通过它我们可以获取应用程序的资源和类，也包括一些应用级别操作，例如：启动一个Activity，发送广播，接受Intent，信息，等。

    7.Service 是否在 main thread 中执行, service 里面是否能执行耗时的操

    作?

    默认情况,如果没有显示的指 servic 所运行的进程, Service 和 activity 是运行在当前 app 所在进

    程的 main thread(UI 主线程)里面。

    service 里面不能执行耗时的操作(网络请求,拷贝数据库,大文件 )

     

    特殊情况 ,可以在清单文件配置 service 执行所在的进程 ,让 service 在另外的进程中执行
     
    ?
    1
    2
    3
    4
    5
    	
    <service 
    android:name="com.baidu.location.f"
    android:enabled="true"
    android:process=":remote" > 
    </service>

     

    8.Activity 怎么和 Service 绑定，怎么在 Activity 中启动自己对应的

    Service?

    Activity 通过 bindService(Intent service, ServiceConnection conn, int flags)跟 Service 进行

    绑定，当绑定成功的时候 Service 会将代理对象通过回调的形式传给 conn，这样我们就拿到了

    Service 提供的服务代理对象。

    在 Activity 中可以通过 startService 和 bindService 方法启动 Service。一般情况下如果想获取

    Service 的服务对象那么肯定需要通过 bindService()方法，比如音乐播放器，第三方支付等。如

    果仅仅只是为了开启一个后台任务那么可以使用 startService()方法。

    9.说说 Activity、Intent、Service 是什么关系

    他们都是 Android 开发中使用频率最高的类。其中 Activity 和 Service 都是 Android 四大组件

    之一。他俩都是 Context 类的子类 ContextWrapper 的子类，因此他俩可以算是兄弟关系吧。不过

    兄弟俩各有各自的本领，Activity 负责用户界面的显示和交互，Service 负责后台任务的处理。Activity

    和 Service 之间可以通过 Intent 传递数据，因此可以把 Intent 看作是通信使者。

    10.请描述一下 BroadcastReceiver

    BroadCastReceiver 是 Android 四大组件之一，主要用于接收系统或者 app 发送的广播事件。

    广播分两种：有序广播和无序广播。

    内部通信实现机制：通过 Android 系统的 Binder 机制实现通信。

    1. 无序广播：完全异步，逻辑上可以被任何广播接收者接收到。优点是效率较高。缺点是一个接收者不

    能将处理结果传递给下一个接收者，并无法终止广播 intent 的传播。

    2. 有序广播：按照被接收者的优先级顺序，在被接收者中依次传播。比如有三个广播接收者 A，B，C，

    优先级是 A > B > C。那这个消息先传给 A，再传给 B，最后传给 C。每个接收者有权终止广播，比

    如 B 终止广播，C 就无法接收到。此外 A 接收到广播后可以对结果对象进行操作，当广播传给 B 时，

    B 可以从结果对象中取得 A 存入的数据。

    在通过 Context.sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler,

    initialCode, initialData, initialExtras)时我们可以指定 resultReceiver 广播接收者，这个接收者我们

    可以认为是最终接收者，通常情况下如果比他优先级更高的接收者如果没有终止广播，那么他的

    onReceive 会被执行两次，第一次是正常的按照优先级顺序执行，第二次是作为最终接收者接收。

    如果比他优先级高的接收者终止了广播，那么他依然能接收到广播

    11.为什么要用 ContentProvider?它和 sql 的实现上有什么差别?

    ContentProvider 屏蔽了数据存储的细节,内部实现对用户完全透明,用户只需要关心操作数据的

    uri 就可以了，ContentProvider 可以实现不同 app 之间共享。

    Sql 也有增删改查的方法，但是 sql 只能查询本应用下的数据库。而 ContentProvider 还可

    以去增删改查本地文件. xml 文件的读取等。

    12.说说 ContentProvider、ContentResolver、ContentObserver 之间的关系

    a. ContentProvider 内容提供者，用于对外提供数据

    b. ContentResolver.notifyChange(uri)发出消息

    c. ContentResolver 内容解析者，用于获取内容提供者提供的数据

    d. ContentObserver 内容监听器，可以监听数据的改变状态

    e. ContentResolver.registerContentObserver()监听消息。
    View 相关

    1.onInterceptTouchEvent()和onTouchEvent()的区别

    onInterceptTouchEvent()用于拦截触摸事件

    onTouchEvent()用于处理触摸事件

    2.RemoteView在哪些功能中使用

    APPwidget和Notification中

    3. SurfaceView和View的区别是什么?

    SurfaceView中采用了双缓存技术，在单独的线程中更新界面

    View在UI线程中更新界面

    4.View的绘制过程

    一个View要显示在界面上，需要经历一个View树的遍历过程，这个过程又可以分为三个过程，也就是自定义View中的三要素：大小，位置，画什么，即onMesure()，onLayout(),onDraw()。

    1.onMesure()确定一个View的大小;

    2.onLayout()确定View在父节点上的位置;

    3.onDraw()绘制View 的内容;

    5.如何自定义ViewGroup

    1.指定的LayoutParams

    2.onMeasure中计算所有childView的宽和高，然后根据childView的宽和高，计算自己的宽和高。(当然，如果不是wrap_content，直接使用父ViewGroup传入的计算值即可)

    3.onLayout中对所有的childView进行布局。

    6.View中onTouch，onTouchEvent，onClick的执行顺序

    dispatchTouchEvent—->onTouch—->onTouchEvent—–>onClick。在所有ACTION_UP事件之后才触发onClick点击事件。
    性能优化相关

    1.ListView卡顿的原因与性能优化，越多越好

    重用converView： 通过复用converview来减少不必要的view的创建，另外Infalte操作会把xml文件实例化成相应的View实例，属于IO操作，是耗时操作。

    减少findViewById()操作： 将xml文件中的元素封装成viewholder静态类，通过converview的setTag和getTag方法将view与相应的holder对象绑定在一起，避免不必要的findviewbyid操作

    避免在 getView 方法中做耗时的操作: 例如加载本地 Image 需要载入内存以及解析 Bitmap ，都是比较耗时的操作，如果用户快速滑动listview，会因为getview逻辑过于复杂耗时而造成滑动卡顿现象。用户滑动时候不要加载图片，待滑动完成再加载，可以使用这个第三方库glide

    Item的布局层次结构尽量简单，避免布局太深或者不必要的重绘

    尽量能保证 Adapter 的 hasStableIds() 返回 true 这样在 notifyDataSetChanged() 的时候，如果item内容并没有变化，ListView 将不会重新绘制这个 View，达到优化的目的

    在一些场景中，ScollView内会包含多个ListView，可以把listview的高度写死固定下来。 由于ScollView在快速滑动过程中需要大量计算每一个listview的高度，阻塞了UI线程导致卡顿现象出现，如果我们每一个item的高度都是均匀的，可以通过计算把listview的高度确定下来，避免卡顿现象出现

    使用 RecycleView 代替listview： 每个item内容的变动，listview都需要去调用notifyDataSetChanged来更新全部的item，太浪费性能了。RecycleView可以实现当个item的局部刷新，并且引入了增加和删除的动态效果，在性能上和定制上都有很大的改善

    ListView 中元素避免半透明： 半透明绘制需要大量乘法计算，在滑动时不停重绘会造成大量的计算，在比较差的机子上会比较卡。 在设计上能不半透明就不不半透明。实在要弄就把在滑动的时候把半透明设置成不透明，滑动完再重新设置成半透明。

    尽量开启硬件加速： 硬件加速提升巨大，避免使用一些不支持的函数导致含泪关闭某个地方的硬件加速。当然这一条不只是对 ListView。

    2.如何避免 OOM 问题的出现

    使用更加轻量的数据结构 例如，我们可以考虑使用ArrayMap/SparseArray而不是HashMap等传统数据结构。通常的HashMap的实现方式更加消耗内存，因为它需要一个额外的实例对象来记录Mapping操作。另外，SparseArray更加高效，在于他们避免了对key与value的自动装箱(autoboxing)，并且避免了装箱后的解箱。

    避免在Android里面使用Enum Android官方培训课程提到过“Enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.”，具体原理请参考《Android性能优化典范(三)》，所以请避免在Android里面使用到枚举。

    减小Bitmap对象的内存占用 Bitmap是一个极容易消耗内存的大胖子，减小创建出来的Bitmap的内存占用可谓是重中之重，，通常来说有以下2个措施： ++inSampleSize++：缩放比例，在把图片载入内存之前，我们需要先计算出一个合适的缩放比例，避免不必要的大图载入。 ++decode format++：解码格式，选择ARGB_6666/RBG_545/ARGB_4444/ALPHA_6，存在很大差异

    Bitmap对象的复用 缩小Bitmap的同时，也需要提高BitMap对象的复用率，避免频繁创建BitMap对象，复用的方法有以下2个措施 LRUCache : “最近最少使用算法”在Android中有极其普遍的应用。ListView与GridView等显示大量图片的控件里，就是使用LRU的机制来缓存处理好的Bitmap，把近期最少使用的数据从缓存中移除，保留使用最频繁的数据， inBitMap高级特性:利用inBitmap的高级特性提高Android系统在Bitmap分配与释放执行效率。使用inBitmap属性可以告知Bitmap解码器去尝试使用已经存在的内存区域，新解码的Bitmap会尝试去使用之前那张Bitmap在Heap中所占据的pixel data内存区域，而不是去问内存重新申请一块区域来存放Bitmap。利用这种特性，即使是上千张的图片，也只会仅仅只需要占用屏幕所能够显示的图片数量的内存大小

    使用更小的图片 在涉及给到资源图片时，我们需要特别留意这张图片是否存在可以压缩的空间，是否可以使用更小的图片。尽量使用更小的图片不仅可以减少内存的使用，还能避免出现大量的InflationException。假设有一张很大的图片被XML文件直接引用，很有可能在初始化视图时会因为内存不足而发生InflationException，这个问题的根本原因其实是发生了OOM。

    StringBuilder 在有些时候，代码中会需要使用到大量的字符串拼接的操作，这种时候有必要考虑使用StringBuilder来替代频繁的“+”。

    避免在onDraw方法里面执行对象的创建 类似onDraw等频繁调用的方法，一定需要注意避免在这里做创建对象的操作，因为他会迅速增加内存的使用，而且很容易引起频繁的gc，甚至是内存抖动。

    避免对象的内存泄露

    3.三级缓存的原理

    从缓存中加载。

    从本地文件中加载(数据库，SD)

    从网络加载。

    a.加载 bitmap 的时候无需考虑 bitmap 加载过程中出现的 oom(内存溢出)和 android 容器快速

    滑动的时候出现的图片错位等现象。(16M)

    b. 支持加载网络图片和本地图片。

    c. 内存管理使用的 lru 算法(移除里面是有频率最少的对象)，更好的管理 bitmap 的内存
    Android其他

    1.讲一下android中进程的优先级?

    前台进程

    可见进程

    服务进程

    后台进程

    空进程

    2.介绍Handle的机制

    Handler通过调用sendmessage方法把消息放在消息队列MessageQueue中，Looper负责把消息从消息队列中取出来，重新再交给Handler进行处理，三者形成一个循环

    通过构建一个消息队列，把所有的Message进行统一的管理，当Message不用了，并不作为垃圾回收，而是放入消息队列中，供下次handler创建消息时候使用，提高了消息对象的复用，减少系统垃圾回收的次数

    每一个线程，都会单独对应的一个looper，这个looper通过ThreadLocal来创建，保证每个线程只创建一个looper，looper初始化后就会调用looper.loop创建一个MessageQueue，这个方法在UI线程初始化的时候就会完成，我们不需要手动创建

    3.Dalvik虚拟机与JVM有什么区别

    Dalvik 基于寄存器，而 JVM 基于栈。基于寄存器的虚拟机对于更大的程序来说，在它们编译的时候，花费的时间更短。

    Dalvik执行.dex格式的字节码，而JVM执行.class格式的字节码。

    4.每个应用程序对应多少个Dalvik虚拟机

    每一个Android应用在底层都会对应一个独立的Dalvik虚拟机实例，其代码在虚拟机的解释下得以执行 ，而所有的Android应用的线程都对应一个Linux线程

    5.应用常驻后台，避免被第三方杀掉的方法

    Service设置成START_STICKY kill 后会被重启(等待5秒左右)，重传Intent，保持与重启前一样

    通过 startForeground将进程设置为前台进程， 做前台服务，优先级和前台应用一个级别，除非在系统内存非常缺，否则此进程不会被 kill

    双进程Service： 让2个进程互相保护对方，其中一个Service被清理后，另外没被清理的进程可以立即重启进程

    用C编写守护进程(即子进程) : Android系统中当前进程(Process)fork出来的子进程，被系统认为是两个不同的进程。当父进程被杀死的时候，子进程仍然可以存活，并不受影响(Android5.0以上的版本不可行

    联系厂商，加入白名单

    6.根据自己的理解描述下Android数字签名。

    所有的应用程序都必须有数字证书，Android系统不会安装一个没有数字证书的应用程序

    Android程序包使用的数字证书可以是自签名的，不需要一个权威的数字证书机构签名认证

    如果要正式发布一个Android程序，必须使用一个合适的私钥生成的数字证书来给程序签名，而不能使用adt插件或者ant工具生成的调试证书来发布。

    数字证书都是有有效期的，Android只是在应用程序安装的时候才会检查证书的有效期。如果程序已经安装在系统中，即使证书过期也不会影响程序的正常功能。

    7.Dalvik基于JVM的改进

    几个class变为一个dex，constant pool，省内存

    Zygote，copy-on-write shared,省内存，省cpu，省电

    基于寄存器的bytecode，省指令，省cpu，省电

    Trace-based JIT,省cpu，省电,省内存

    8.ARGB_8888占用内存大小

    本题的答案，是4byte，即ARGB各占用8个比特来描述。

    9.apk安装卸载的原理

    安装过程：复制apk安装包到data/app目录下，解压并扫描安装包，把dex文件(dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录。

    卸载过程：删除安装过程中在上述三个目录下创建的文件及目录。

    10.通过Intent传递一些二进制数据的方法有哪些?

    使用Serializable接口实现序列化，这是Java常用的方法。

    实现Parcelable接口，这里Android的部分类比如Bitmap类就已经实现了，同时Parcelable在Android AIDL中交换数据也很常见的。

    11.横竖屏切换时Activity的生命周期

    此时的生命周期跟清单文件里的配置有关系。

    不设置Activity的android:configChanges时，切屏会重新调用各个生命周期默认首先销毁当前activity,然后重新加载。

    设置Activity android:configChanges=”orientation|keyboardHidden|screenSize”时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法

    12.Serializable 和 Parcelable 的区别

    在使用内存的时候，Parcelable 类比 Serializable 性能高，所以推荐使用 Parcelable 类。

    1. Serializable 在序列化的时候会产生大量的临时变量，从而引起频繁的 GC。

    2. Parcelable 不能使用在要将数据存储在磁盘上的情况。尽管 Serializable 效率低点，但在这

    种情况下，还是建议你用 Serializable 。

    13.Android 中如何捕获未捕获的异常

    自 定 义 一 个 Application ， 比 如 叫 MyApplication 继 承 Application 实 现

    UncaughtExceptionHandler。

    覆写 UncaughtExceptionHandler 的 onCreate 和 uncaughtException 方法。

    14.Android 的权限规则

    Android 中的 apk 必须签名

    基于 UserID 的进程级别的安全机制

    默认 apk 生成的数据对外是不可见的

    AndroidManifest.xml 中的显式权限声明

    15.多线程间通信和多进程之间通信有什么不同，分别怎么实现?

    一、进程间的通信方式

    1. 管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的

    进程间使用。进程的亲缘关系通常是指父子进程关系。

    2. 有名管道 (namedpipe) ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的

    通信。

    3. 信号量(semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它

    常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进

    程间以及同一进程内不同线程之间的同步手段。

    4. 消息队列( messagequeue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符

    标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。

    5. 信号 (sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。

    6. 共享内存(shared memory ) ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内

    存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间

    通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间

    的同步和通信。

    7. 套接字(socket ) ： 套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同

    及其间的进程通信。

    二、线程间的通信方式

    1. 锁机制：包括互斥锁、条件变量、读写锁

    *互斥锁提供了以排他方式防止数据结构被并发修改的方法。

    *读写锁允许多个线程同时读共享数据，而对写操作是互斥的。

    *条件变量可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件的测试是在互斥锁

    的保护下进行的。条件变量始终与互斥锁一起使用。

    2. 信号量机制(Semaphore)：包括无名线程信号量和命名线程信号量

    3. 信号机制(Signal)：类似进程间的信号处理

    线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机

    制。

    16.说说 LruCache 底层原理

    LruCache 使用一个 LinkedHashMap 简单的实现内存的缓存，没有软引用，都是强引用。如果添

    加的数据大于设置的最大值，就删除最先缓存的数据来调整内存。

    maxSize 是通过构造方法初始化的值，他表示这个缓存能缓存的最大值是多少。

    size 在添加和移除缓存都被更新值，他通过 safeSizeOf 这个方法更新值。safeSizeOf 默认返回 1，

    但一般我们会根据 maxSize 重写这个方法，比如认为 maxSize 代表是 KB 的话，那么就以 KB 为单

    位返回该项所占的内存大小。
    除异常外首先会判断 size 是否超过 maxSize，如果超过了就取出最先插入的缓存，如果不为空就
    删掉，并把 size 减去该项所占的大小。这个操作将一直循环下去，直到 size 比 maxSize 小或者缓存为空。
